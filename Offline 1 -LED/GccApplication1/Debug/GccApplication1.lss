
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fe  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056e  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000316  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007c  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	DDRA = 0b00110000 ;
  6c:	80 e3       	ldi	r24, 0x30	; 48
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00110000 ;
  70:	8b bb       	out	0x1b, r24	; 27
	int flag = 0 ;
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	2f e3       	ldi	r18, 0x3F	; 63
  78:	3d e0       	ldi	r19, 0x0D	; 13
  7a:	43 e0       	ldi	r20, 0x03	; 3
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	30 40       	sbci	r19, 0x00	; 0
  80:	40 40       	sbci	r20, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(1000);
		if(flag){
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	19 f0       	breq	.+6      	; 0x92 <main+0x26>
			PORTA = 0b00100000 ;	
  8c:	20 e2       	ldi	r18, 0x20	; 32
  8e:	2b bb       	out	0x1b, r18	; 27
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
		}
		else{
			PORTA= 0b00010000 ;
  92:	20 e1       	ldi	r18, 0x10	; 16
  94:	2b bb       	out	0x1b, r18	; 27
		}
		flag = 1 - flag ;
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	a9 01       	movw	r20, r18
  9c:	48 1b       	sub	r20, r24
  9e:	59 0b       	sbc	r21, r25
  a0:	ca 01       	movw	r24, r20
    }
  a2:	e9 cf       	rjmp	.-46     	; 0x76 <main+0xa>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
