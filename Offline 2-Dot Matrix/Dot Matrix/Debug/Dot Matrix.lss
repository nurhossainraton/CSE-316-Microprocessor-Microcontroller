
Dot Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  000001ae  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075e  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000600  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000348  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032b  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018a  00000000  00000000  00001767  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3f       	cpi	r26, 0xF0	; 240
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  7a:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <display>:
	0,0,0,0,0,0,0,0
};

void display(){
	int row = 1 ;
	for(int i = 0 ; i < 8 ; i ++ ){
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b0 e0       	ldi	r27, 0x00	; 0
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0
};

void display(){
	int row = 1 ;
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	70 e0       	ldi	r23, 0x00	; 0
	for(int i = 0 ; i < 8 ; i ++ ){
  8a:	38 c0       	rjmp	.+112    	; 0xfc <display+0x7a>
		int col = 0 ;
		for(int j = 0 ; j < 8 ; j ++ ){
		//int k = 7 - j ;
			if(mat[i][j]){
  8c:	fd 01       	movw	r30, r26
  8e:	ee 0f       	add	r30, r30
  90:	ff 1f       	adc	r31, r31
  92:	ee 0f       	add	r30, r30
  94:	ff 1f       	adc	r31, r31
  96:	ee 0f       	add	r30, r30
  98:	ff 1f       	adc	r31, r31
  9a:	e8 0f       	add	r30, r24
  9c:	f9 1f       	adc	r31, r25
  9e:	ee 0f       	add	r30, r30
  a0:	ff 1f       	adc	r31, r31
  a2:	e0 5a       	subi	r30, 0xA0	; 160
  a4:	ff 4f       	sbci	r31, 0xFF	; 255
  a6:	20 81       	ld	r18, Z
  a8:	31 81       	ldd	r19, Z+1	; 0x01
  aa:	23 2b       	or	r18, r19
  ac:	51 f0       	breq	.+20     	; 0xc2 <display+0x40>
				col += 1 << j ;
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	08 2e       	mov	r0, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <display+0x38>
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <display+0x34>
  be:	42 0f       	add	r20, r18
  c0:	53 1f       	adc	r21, r19

void display(){
	int row = 1 ;
	for(int i = 0 ; i < 8 ; i ++ ){
		int col = 0 ;
		for(int j = 0 ; j < 8 ; j ++ ){
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	04 c0       	rjmp	.+8      	; 0xce <display+0x4c>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	91 05       	cpc	r25, r1
  d2:	e4 f2       	brlt	.-72     	; 0x8c <display+0xa>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <display+0x62>
			if(mat[i][j]){
				col += 1 << j ;
			}
		}
		for (int k = 0; k < 200; k++) {
			PORTD = ~row ;
  da:	26 2f       	mov	r18, r22
  dc:	20 95       	com	r18
  de:	22 bb       	out	0x12, r18	; 18
			PORTA = col ;
  e0:	4b bb       	out	0x1b, r20	; 27
		//int k = 7 - j ;
			if(mat[i][j]){
				col += 1 << j ;
			}
		}
		for (int k = 0; k < 200; k++) {
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	88 3c       	cpi	r24, 0xC8	; 200
  e6:	91 05       	cpc	r25, r1
  e8:	c4 f3       	brlt	.-16     	; 0xda <display+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	83 ef       	ldi	r24, 0xF3	; 243
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <display+0x6c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <display+0x72>
  f4:	00 00       	nop
			PORTA = col ;
		}

		_delay_ms(2);
		
		row = row << 1 ;
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
	0,0,0,0,0,0,0,0
};

void display(){
	int row = 1 ;
	for(int i = 0 ; i < 8 ; i ++ ){
  fa:	11 96       	adiw	r26, 0x01	; 1
  fc:	a8 30       	cpi	r26, 0x08	; 8
  fe:	b1 05       	cpc	r27, r1
 100:	14 f3       	brlt	.-60     	; 0xc6 <display+0x44>
		_delay_ms(2);
		
		row = row << 1 ;
	}
	
}
 102:	08 95       	ret

00000104 <display_shift_down>:


void display_shift_down()
{
	
	for(int i = 8; i>0; i--){
 104:	28 e0       	ldi	r18, 0x08	; 8
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	28 c0       	rjmp	.+80     	; 0x15a <display_shift_down+0x56>
		for(int j = 0; j<8; j++) mat[i][j] = mat[i-1][j];
 10a:	f9 01       	movw	r30, r18
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e8 0f       	add	r30, r24
 11c:	f9 1f       	adc	r31, r25
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e0 5a       	subi	r30, 0xA0	; 160
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	40 81       	ld	r20, Z
 128:	51 81       	ldd	r21, Z+1	; 0x01
 12a:	f9 01       	movw	r30, r18
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e8 0f       	add	r30, r24
 13a:	f9 1f       	adc	r31, r25
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	e0 5a       	subi	r30, 0xA0	; 160
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	51 83       	std	Z+1, r21	; 0x01
 146:	40 83       	st	Z, r20
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	02 c0       	rjmp	.+4      	; 0x150 <display_shift_down+0x4c>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	88 30       	cpi	r24, 0x08	; 8
 152:	91 05       	cpc	r25, r1
 154:	d4 f2       	brlt	.-76     	; 0x10a <display_shift_down+0x6>


void display_shift_down()
{
	
	for(int i = 8; i>0; i--){
 156:	21 50       	subi	r18, 0x01	; 1
 158:	31 09       	sbc	r19, r1
 15a:	12 16       	cp	r1, r18
 15c:	13 06       	cpc	r1, r19
 15e:	b4 f3       	brlt	.-20     	; 0x14c <display_shift_down+0x48>
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	11 c0       	rjmp	.+34     	; 0x188 <display_shift_down+0x84>
		for(int j = 0; j<8; j++) mat[i][j] = mat[i-1][j];
	}
	
	for(int i = 8; i>=0; i--){
		mat[0][i] = mat[8][i];
 166:	fc 01       	movw	r30, r24
 168:	e0 5c       	subi	r30, 0xC0	; 192
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	e0 5a       	subi	r30, 0xA0	; 160
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	20 81       	ld	r18, Z
 176:	31 81       	ldd	r19, Z+1	; 0x01
 178:	fc 01       	movw	r30, r24
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	e0 5a       	subi	r30, 0xA0	; 160
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	31 83       	std	Z+1, r19	; 0x01
 184:	20 83       	st	Z, r18
	
	for(int i = 8; i>0; i--){
		for(int j = 0; j<8; j++) mat[i][j] = mat[i-1][j];
	}
	
	for(int i = 8; i>=0; i--){
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	99 23       	and	r25, r25
 18a:	6c f7       	brge	.-38     	; 0x166 <display_shift_down+0x62>
		mat[0][i] = mat[8][i];
	}
	
	
	
}
 18c:	08 95       	ret

0000018e <main>:


int main(void)
{
	
	DDRA = 0b11111111; // A for columns
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0b11111111; // D for rows
 192:	81 bb       	out	0x11, r24	; 17
	int cnt = 0 ;
	/* Replace with your application code */
	while (1)
	{
		display();
 194:	0e 94 41 00 	call	0x82	; 0x82 <display>
 198:	87 ea       	ldi	r24, 0xA7	; 167
 19a:	91 e6       	ldi	r25, 0x61	; 97
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0xe>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x14>
 1a2:	00 00       	nop
		_delay_ms(100);
		display_shift_down() ;
 1a4:	0e 94 82 00 	call	0x104	; 0x104 <display_shift_down>
 1a8:	f5 cf       	rjmp	.-22     	; 0x194 <main+0x6>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
